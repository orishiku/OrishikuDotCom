{"version":3,"sources":["blog.scss","_variables.scss","mixins/_helpers.scss","mixins/_grid.scss"],"names":[],"mappings":"AAKA;EAEE,mBCSmB;EDRnB,cCOqB;EDNrB,YAAY;EACZ,YAAY,EAAA;EALd;IAOG,kBAAkB;IAClB,UAAU;IACV,YAAY,EAAA;EATf;IAYG,qBAAqB;IACrB,aAAa;IACb,mBAAoC,EAAA;EAdvC;IAiBG,qBAAqB;IACrB,aAAa;IEnBf,yBDYoB;ICXpB,cDUsB,EAAA;IDVvB;MEGE,yBAA0C;MAC1C,qBAAqB,EAAA;IFJvB;MEQE,mBAAoC,EAAA;IFRtC;MEYE,yBAA6C;MAC7C,cAAgC;MAChC,eAAe,EAAA;;AFSjB;EAEE,cAAc,EAAA;EAFhB;IAIG,UAAU,EAAA;;AAJb;EASG,mBAAmB,EAAA;;AATtB;EG0DC,cAAc;EACd,WAAW;EAGV,UAAgD;EAChD,eAAqD;EACrD,eAAe;EHhDd,gBAAgB;EAChB,iBAAiB,EAAA;EEjBlB;IFAF;MG0DC,cAAc;MACd,WAAW;MAGV,UAAgD;MAChD,eAAqD;MACrD,eAAe,EAAA,EHxCd;EExBD;IFAF;MG0DC,cAAc;MACd,WAAW;MAGV,WAAgD;MAChD,eAAqD;MACrD,eAAe,EAAA,EHxCd;EExBD;IFAF;MG0DC,cAAc;MACd,WAAW;MAGV,WAAgD;MAChD,eAAqD;MACrD,eAAe,EAAA,EHxCd;EExBD;IFAF;MG0DC,cAAc;MACd,WAAW;MAGV,UAAgD;MAChD,eAAqD;MACrD,eAAe,EAAA,EHxCd;EExBD;IFAF;MG0DC,cAAc;MACd,WAAW;MAGV,WAAgD;MAChD,eAAqD;MACrD,eAAe,EAAA,EHxCd;EAxBH;IAmBI,WAAW;IACT,YAAY;IACd,gBAAgB;IAChB,kBAAkB,EAAA;;AAtBtB;EG0DC,cAAc;EACd,WAAW;EAGV,UAAgD;EAChD,eAAqD;EACrD,eAAe;EHlCd,uBAAuB;EACvB,8BAAoC;EACpC,gBAAgB;EAChB,mBAAmB,EAAA;EEjCpB;IFAF;MG0DC,cAAc;MACd,WAAW;MAGV,UAAgD;MAChD,eAAqD;MACrD,eAAe,EAAA,EHGd;EEnED;IFAF;MG0DC,cAAc;MACd,WAAW;MAGV,YAAgD;MAChD,eAAqD;MACrD,eAAe,EAAA,EHGd;EEnED;IFAF;MG0DC,cAAc;MACd,WAAW;MAGV,WAAgD;MAChD,eAAqD;MACrD,eAAe,EAAA,EHGd;EEnED;IFAF;MG0DC,cAAc;MACd,WAAW;MAGV,UAAgD;MAChD,eAAqD;MACrD,eAAe,EAAA,EHGd;EEnED;IFAF;MG0DC,cAAc;MACd,WAAW;MAGV,WAAgD;MAChD,eAAqD;MACrD,eAAe,EAAA,EHGd;EAnEH;IAoCI,YAAY;IE5Df,yBDiBkB;IChBlB,cDSqB,EAAA;IDctB;MEpBE,yBAA0C;MAC1C,qBAAqB,EAAA;IFmBvB;MEfE,mBAAoC,EAAA;IFetC;MEXE,yBAA6C;MAC7C,cAAgC;MAChC,eAAe,EAAA;EFSjB;IAyCI,YAAY;IACZ,mBAAmB;IElEtB,yBDiBkB;IChBlB,cDWoB,EAAA;IDYrB;MEpBE,yBAA0C;MAC1C,qBAAqB,EAAA;IFmBvB;MEfE,mBAAoC,EAAA;IFetC;MEXE,yBAA6C;MAC7C,cAAgC;MAChC,eAAe,EAAA;EFSjB;IA8CI,UAAU,EAAA;IA9Cd;MAiDK,gBAAe;MACf,aAAa;MACb,iBAAiB;MACjB,0BAA0B;MAC1B,mBCjEgB,EAAA;IDYrB;MAwDK,aAAa;MACb,kBAAkB;MAClB,qBAAqB,EAAA;IA1D1B;MA6DO,sBAAsB,EAAA;EA7D7B;IAiEI,8BAAmC,EAAA","file":"blog.min.css","sourcesContent":["@import 'variables.scss';\n@import 'mixins/_grid.scss';\n@import 'mixins/_helpers.scss';\n\n//@import 'type.scss';\nsection.container.blog {\n\tarticle.paginator {\n\t\tbackground: $accentColor;\n\t\tcolor: $textIconColor;\n\t\tpadding: 0px;\n\t\tborder: none;\n\t\tsection {\n\t\t\ttext-align: center;\n\t\t\tpadding: 0;\t\n\t\t\tborder: none;\n\t\t}\n\t\tspan {\n\t\t\tdisplay: inline-block;\n\t\t\tpadding: 10px;\n\t\t\tbackground: darken($accentColor, 3%);\n\t\t}\n\t\ta {\n\t\t\tdisplay: inline-block;\n\t\t\tpadding: 10px;\n\t\t\t@include button-style($accentColor,$textIconColor);\n\t\t}\n\t}\n}\nsection.container-blog {\n\t&>header {\n\t\tpadding: 1.5em;\n\t\t&:empty {\n\t\t\tpadding: 0;\n\t\t}\n\t}\t\n\tarticle {\n\t\tp {\n\t\t\ttext-align: justify;\n\t\t}\n\t\tsection {\n\t\t\t@include columns(9,0,0);\n\t\t\t@include responsive-columns('tablet', 6,0,0);\n\t\t\t@include responsive-columns('mobile', 1,0,0);\n\t\t\t\n\t\t\tpadding: 1em 2em;\n\t\t\tbackground: white;\n\t\t\t.code {\n\t\t\t\twidth: 100%;\n  \t\t\t\tresize: none;\n\t\t\t\toverflow-x: auto; \n\t\t\t\toverflow-y: hidden;\n\t\t\t}\n\t\t}\n\t\taside{\n\t\t\t@include columns(3,0,0);\n\t\t\t@include responsive-columns('tablet', 2,0,0);\n\t\t\t@include responsive-columns('mobile', 1,0,0);\n\t\t\t\n\t\t\tbackground-color: white;\n\t\t\tborder-left: 5px $primaryColor solid;\n\t\t\tpadding: 1em 2em;\n\t\t\tmargin-bottom: 10px;\n\t\t\t\n\t\t\ta.category {\n\t\t\t\tpadding: 5px;\n\t\t\t\t@include button-style($baseColor, $primaryColor);\n\t\t\t\t\n\t\t\t}\n\t\t\ta.tag {\t\n\t\t\t\tpadding: 5px;\n\t\t\t\tborder-radius: 15px;\n\t\t\t\t@include button-style($baseColor, $accentColor);\n\t\t\t}\n\t\t\t&.author {\n\t\t\t\tpadding: 0;\n\t\t\t\t\n\t\t\t\timg {\n\t\t\t\t\tmax-width:100px;\n\t\t\t\t\theight: 100px;\n\t\t\t\t\tmax-height: 100px;\n\t\t\t\t\tborder-radius: 0 5px 5px 0;\n\t\t\t\t\tbackground: $accentColor;\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\tdiv {\n\t\t\t\t\tpadding: 10px;\n\t\t\t\t\ttext-align: center;\n\t\t\t\t\tdisplay: inline-block;\n\t\t\t\t}\t\n\t\t\t\t&>* {\n  \t\t\t\t\tvertical-align: middle;\n\t\t\t\t}\n\t\t\t}\n\t\t\t&.extra {\n\t\t\t\tborder-left: 5px $accentColor solid;\n\t\t\t}\n\t\t}\n\t}\n}","//\r\n// Variables\r\n// --------------------------------------------------\r\n\r\n// Fonts\r\n// -------------------\r\n\r\n$headingFont: 'Trebuchet MS', sans-serif;\r\n$paragraphFont: 'Helvetica', sans-serif;\r\n\r\n// Colours\r\n// -------------------\r\n$darkPrimaryColor: #512DA8;\r\n$lightPrimaryColor: #D1C4E9;\r\n$primaryColor: #673AB7;\r\n$textIconColor: #FFFFFF;\r\n$accentColor: #009688;\r\n$primaryTextColor: #212121;\r\n$secondaryTextColor: #757575;\r\n$dividerColor: #BDBDBD;\r\n\r\n$baseColor: #EEEEEE;\r\n\r\n$socialFacebook: #3B5998;\r\n$socialTwitter: #00ACED;\r\n$socialInstagram: #3F729B;\r\n$socialYoutube: #CD201F;\r\n\r\n$errorColor: #AA0000;\r\n$successColor: #00AA00;\r\n$baseFontSize: 16;\r\n\r\n// Breakpoints\r\n// -------------------\r\n\r\n$breakpoints: (\r\n\t'mobile': (max-width: 800px),\r\n\t'tablet': (max-width: 1024px),\r\n\t'desktop': (min-width: 1200px),\r\n);\r\n\r\n// Include gutter on outside \r\n$gutterOnOutside: true;\r\n\r\n// Breakpoints Grid Settings\r\n// -------------------\r\n\r\n$grid-settings: (\r\n\tbase: (\r\n\t\tcontainer-columns: 12,\r\n\t\tgutter: 1%,\r\n\t\tmax-width: 1100px,\r\n\t),\r\n\tdesktop: (\r\n\t\tcontainer-columns: 12,\r\n\t\tgutter: 1%,\r\n\t\tmax-width: 1200px,\r\n\t),\r\n\ttablet: (\r\n\t\tcontainer-columns: 8,\r\n\t\tgutter: 1%,\r\n\t),\r\n\tmobile: (\r\n\t\tcontainer-columns: 1,\r\n\t\tgutter: 5%,\r\n\t)\r\n);\r\n","// Custom Buttons\r\n// -------------------\r\n\r\n@mixin button-style($customColor, $customTextColor){\r\n\tbackground-color: $customColor;\r\n\tcolor: $customTextColor;\r\n\t\r\n\t &:hover {\r\n\t\tbackground-color: darken($customColor, 3%);\r\n\t\ttext-decoration: none;\r\n\t}\r\n\t\t\r\n\t&:active {\r\n\t\tbackground: darken($customColor, 6%);\r\n\t}\r\n\r\n\t&.disabled {\r\n\t\tbackground-color: lighten($customColor, 2.5%);\r\n\t\tcolor: darken($customColor, 15%);\r\n\t\tcursor: default;\r\n\t}\r\n}\r\n\r\n// Breakpoints\r\n// --------------------------------------------------\r\n\r\n@mixin respond-to($breakpoint) {\r\n\t@if map-has-key($breakpoints, $breakpoint) {\r\n\t\t@media #{inspect(map-get($breakpoints, $breakpoint))} {\r\n\t\t\t@content;\r\n\t\t}\r\n\t}\r\n\r\n\t@else {\r\n\t\t@error 'No value found for `#{$breakpoint}`. '\r\n\t\t\t\t+ 'Please make sure it is defined in `$breakpoints` map.';\r\n\t}\r\n}\r\n\r\n// Shortcuts\r\n// -------------------\r\n\r\n@mixin size($height, $width) {\r\n\twidth: $width;\r\n\theight: $height;\r\n}\r\n\r\n@mixin hide-text() {\r\n\tfont: 0/0 a;\r\n\tcolor: transparent;\r\n\ttext-shadow: none;\r\n}\r\n\r\n@mixin clearfix {\r\n\t&:after {\r\n\t\tcontent: \"\";\r\n\t\tdisplay: table;\r\n\t\tclear: both;\r\n\t}\r\n}\r\n\r\n@mixin center() {\r\n\tposition: absolute;\r\n\ttop: 50%;\r\n\tleft: 50%;\r\n\ttransform: translate(-50%, -50%);\r\n}\r\n\r\n@mixin reset-center() {\r\n\tposition: relative;\r\n\ttop: auto;\r\n\tleft: auto;\r\n\ttransform: none;\r\n}\r\n\r\n@mixin center-vertically() {\r\n\tposition: absolute;\r\n\ttop: 50%;\r\n\ttransform: translateY(-50%);\r\n}\r\n\r\n@mixin reset-center-vertically() {\r\n\tposition: relative;\r\n\ttop: auto;\r\n\ttransform: none;\r\n}\r\n\r\n@mixin clearfix-float(){\r\n    float: left;\r\n    width: 100%;\r\n}\r\n\r\n@mixin iconify($content){\r\n    content: $content;\r\n    font-family: \"entypo\";\r\n    font-style: normal;\r\n    font-weight: normal;\r\n    speak: none;\r\n    display: inline-block;\r\n    text-decoration: inherit;\r\n    width: 1em;\r\n    margin-right: .2em;\r\n    text-align: center;\r\n    font-variant: normal;\r\n    text-transform: none;\r\n    line-height: 1em;\r\n    margin-left: .2em;\r\n}\r\n\r\n@mixin placeholder {\r\n\t::-webkit-input-placeholder {@content}\r\n\t:-moz-placeholder           {@content}\r\n\t::-moz-placeholder          {@content}\r\n\t:-ms-input-placeholder      {@content}  \r\n}\r\n\r\n@mixin font-size($targetSize: 16) {    \r\n    font-size: $targetSize + px;\r\n    font-size: ($targetSize / $baseFontSize) + rem;\r\n}\r\n\r\n@mixin line-height($targetSize: 16) {    \r\n    line-height: $targetSize + px;\r\n    line-height: ($targetSize / $baseFontSize) + rem;\r\n}\r\n\r\n// Useful Visual Elements\r\n// -------------------\r\n\r\n@mixin arrow-up($size: 5px, $color: #000) {\r\n\twidth: 0; \r\n\theight: 0; \r\n\tborder-left: $size solid transparent;\r\n\tborder-right: $size solid transparent;\r\n\tborder-bottom: $size solid $color;\r\n}\r\n@mixin arrow-down($size: 5px, $color: #000) {\r\n\twidth: 0; \r\n\theight: 0; \r\n\tborder-left: $size solid transparent;\r\n\tborder-right: $size solid transparent;\r\n\tborder-top: $size solid $color;\r\n}\r\n@mixin arrow-left($size: 5px, $color: #000) {\r\n\twidth: 0; \r\n\theight: 0; \r\n\tborder-top: $size solid transparent;\r\n\tborder-bottom: $size solid transparent; \r\n\tborder-right: $size solid $color; \r\n}\r\n@mixin arrow-right($size: 5px, $color: #000) {\r\n\twidth: 0; \r\n\theight: 0; \r\n\tborder-top: $size solid transparent;\r\n\tborder-bottom: $size solid transparent;\r\n\tborder-left: $size solid $color;\r\n}","//\r\n// Grid Functions\r\n// --------------------------------------------------\r\n\r\n// Checks if gutter is set\r\n// Returns default gutter value if gutter is not set\r\n@function get-gutter($gutter, $default-gutter){\r\n\t\r\n\t@if ($gutter == null) {\r\n\t\t@return $default-gutter;\r\n\t} @else {\r\n\t\t@return\t$gutter;\r\n\t}\r\n}\r\n\r\n// Checks if columns should be set to default columns\r\n@function get-columns($columns, $default-container-columns, $offset) {\r\n\t \r\n\t@if (($columns + $offset) > $default-container-columns) {\r\n\t\t@return $default-container-columns;\r\n\t} @else {\r\n\t\t@return $columns;\r\n\t}\r\n}\r\n\r\n@function get-offset($columns, $default-container-columns, $offset) {\r\n\r\n\t@if (($columns + $offset) > $default-container-columns) {\r\n\t\t@return 0;\r\n\t} @else {\r\n\t\t@return $offset;\r\n\t}\r\n}\r\n\r\n\r\n//\r\n// Grid\r\n// --------------------------------------------------\r\n\r\n$base-container-columns: map-get(map-get($grid-settings, base), container-columns);\r\n$base-gutter:            map-get(map-get($grid-settings, base), gutter);\r\n$base-max-width:         map-get(map-get($grid-settings, base), max-width);\r\n\r\n@mixin container($max-width: $base-max-width) {\r\n\t\r\n\t// Build default base container\r\n\tmax-width: $max-width;\r\n\tmargin: {\r\n\t\tleft: auto;\r\n\t\tright: auto;\r\n  \t}\r\n  \t@include clearfix();\r\n\r\n\t// Loop through grid settings and build breakpoint container\r\n\t@each $breakpoint, $breakpoint-settings in $grid-settings {\r\n\t\t\t\r\n\t\t@if ($breakpoint != 'base') {\r\n\t\t\t$max-width: map-get($breakpoint-settings, max-width);\r\n\r\n\t\t\t@include respond-to($breakpoint) {\r\n\r\n\t\t\t\t@if ($max-width) {\r\n\t\t\t\t\tmax-width: $max-width;\r\n\t\t\t\t} @else {\r\n\t\t\t\t\t// If max-width not specified use 100%;\r\n\t\t\t\t\tmax-width: 100%;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\n// Builds columns\r\n@mixin build-column($columns, $container-columns, $offset, $gutter) {\r\n\t\r\n\r\n\t@if ($gutterOnOutside) {\r\n\t\t@include build-column-outside-gutter($columns, $container-columns, $offset, $gutter);\r\n\t}\r\n\r\n\t@else {\r\n\t\t@include build-column-no-outside-gutter($columns, $container-columns, $offset, $gutter);\r\n\t}\r\n}\r\n\r\n@mixin build-column-outside-gutter($columns, $container-columns, $offset, $gutter) {\r\n\tdisplay: block;\r\n\tfloat: left;\r\n\r\n\t@if ($gutter == 0) {\r\n\t\twidth: percentage($columns / $container-columns);\r\n\t\tmargin-left: percentage($offset / $container-columns);\r\n\t\tmargin-right: 0;\r\n\t}\r\n\t@else {\r\n\t\twidth: percentage($columns / $container-columns) - $gutter * 2;\r\n\t\tmargin-left: percentage($offset / $container-columns) + $gutter;\r\n\t\tmargin-right: $gutter;\r\n\t}\r\n}\r\n\r\n@mixin build-column-no-outside-gutter($columns, $container-columns, $offset, $gutter) {\r\n\tdisplay: block;\r\n\tfloat: left;\r\n\t\r\n\t@if ($columns == $container-columns) {\r\n\t\t$gutter: 0;\r\n\t}\r\n\t\r\n\twidth: get-columns-width($columns, $container-columns, $offset, $gutter);\r\n\tmargin-right: $gutter;\r\n\t\r\n\t@if ($offset > 0 and $offset < $container-columns) {\r\n\t\tmargin-left: get-offset-width($offset, $container-columns, $offset, $gutter);\r\n\t}\r\n\r\n\t&:last-child {\r\n\t\tmargin-right: 0;\r\n\t}\r\n}\r\n\r\n@function get-column-width($columns, $container-columns, $offset, $gutter) {\r\n\t$width: (100% - ($container-columns - 1) * $gutter) / $container-columns;\r\n\t\r\n\t@return $width;\r\n}\r\n\r\n@function get-columns-width($columns, $container-columns, $offset, $gutter) {\r\n\t\r\n\t$width: get-column-width($columns, $container-columns, $offset, $gutter);\r\n\t$columnsWidth: ($width * $columns) + $gutter * ($columns - 1);\r\n\r\n\t@return $columnsWidth;\r\n}\r\n\r\n@function  get-offset-width($columns, $container-columns, $offset, $gutter) {\r\n\t\r\n\t$width: get-column-width($columns, $container-columns, $offset, $gutter);\r\n\t$columnsWidth: ($width * $columns) + $gutter * $columns;\r\n\r\n\t@return $columnsWidth;\r\n}\r\n\r\n@mixin omega() {\r\n\t\r\n\tmargin-right: 0;\r\n\r\n\t@each $breakpoint, $breakpoint-settings in $grid-settings {\r\n\t\t\r\n\t\t@if ($breakpoint != 'base') {\r\n\t\t\t@include respond-to($breakpoint) {\r\n\t\t\t\tmargin-right: 0;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t}\r\n}\r\n\r\n@mixin columns($columns: $base-container-columns, $offset: 0, $gutter: null) {\r\n\t\r\n\t// Build default base columns\r\n\t$c-gutter: get-gutter($gutter, $base-gutter);\r\n\t@include build-column($columns, $base-container-columns, $offset, $c-gutter);\r\n\t\r\n\t\r\n\t// Build other breakpoint columns\r\n\r\n\t// Loop through grid settings and build breakpoint columns\r\n\t@each $breakpoint, $breakpoint-settings in $grid-settings {\r\n\t\t\r\n\t\t@if ($breakpoint != 'base') {\r\n\t\t\t\r\n\t\t\t$default-container-columns: map-get($breakpoint-settings, container-columns);\r\n\t\t\t$default-gutter:  map-get($breakpoint-settings, gutter);\r\n\r\n\t\t\t$c-gutter:  get-gutter($gutter, $default-gutter);\r\n\t\t\t$c-columns: get-columns($columns, $default-container-columns, $offset);\r\n\t\t\t$c-offset:  get-offset($c-columns, $default-container-columns, $offset);\r\n\r\n\t\t\t@include respond-to($breakpoint) {\r\n\r\n\t\t\t\t@include build-column($c-columns, $default-container-columns, $c-offset, $c-gutter);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\n\r\n@mixin responsive-columns($breakpoint, $columns, $offset: 0, $gutter: null) {\r\n\t\r\n\t$default-container-columns: map-get(map-get($grid-settings, $breakpoint), container-columns);\r\n\t$default-gutter:            map-get(map-get($grid-settings, $breakpoint), gutter);\r\n\r\n\t@include respond-to($breakpoint) {\r\n\t\t\r\n\t\t$c-gutter:  get-gutter($gutter, $default-gutter);\r\n\t\t@include build-column($columns, $default-container-columns, $offset, $c-gutter);\r\n\t}\r\n}"]}